Problem1.a
  The number of comparison for the partition is always one less than the number of elements. So if we have an array with 10 elements => 9 comparisons would be done. In this case if we have k times of each number => comparison number would be 3k-1. For example if we have an array like this [5,5,2,2,8,8] where k=2 => num of comparisons = 3*k-1 = 3*2-1=5 which is exactly one less than the number of elements in the array.


Problem1.b
I created an array with 20 elements so that it's not taking much time to compile, but of course you can change it to 1.000.000. As I said above in this example comparioson num woulb be one less = 19 and that is the number that is being written in the first line.

 public class QuickSort 
{ 
    
	int partition(int arr[], int low, int high) { 
		int pivot = arr[high]; 
		int i = (low-1); 
		int count = 0;
		
		for (int j=low; j<high; j++) 
		{ 
			if (arr[j] <= pivot) 
			{ 
			    
				i++; 
                int temp = arr[i]; 
				arr[i] = arr[j]; 
				arr[j] = temp; 
				
			}
	        
            count += 1;
         
		}
		
        System.out.println("Number of comperisons " + count);

		int temp = arr[i+1]; 
		arr[i+1] = arr[high]; 
		arr[high] = temp; 
        return i+1; 
        		
	} 

	void sort(int arr[], int low, int high) 
	{ 
		if (low < high) 
		{ 
			int pi = partition(arr, low, high); 
			sort(arr, low, pi-1); 
			sort(arr, pi+1, high); 
		} 
	} 

	static void printArray(int arr[]) { 
		int n = arr.length; 
		for (int i=0; i<n; ++i) 
		System.out.println(arr[i]+" "); 
		System.out.println(); 
	} 
	
    public static int randomFill(){
        int random = (int)(Math.random() * 1000000 + 1);
        return random;
    }

	public static void main(String args[]) 
	{ 
	    int random = (int)(Math.random() * 1000000 + 1);
	    int n = 20; 
        int[] intArray = new int[n];
        
	    for (int i=0; i<n; i++){
           intArray[i] = randomFill();
	    }
	    
        QuickSort ob = new QuickSort(); 
 		ob.sort(intArray, 0, n-1); 
		System.out.println("sorted array"); 
		printArray(intArray); 
    }
}

  Problem 2.a
In this case instead of choosing the pivot to be the first or the last element, we randomly choose it and do the partition, but it doesn't change the fact that anyway all the elements should be compared with the pivot element either it is in the center or the left part. Although in this case the running time is faster, the number of comparisons is still one less than the number of overall elements, so I think it will be again 3k-1. 

  Problem 2.b
  import java.util.Random;
 
public class Randomized_Quick_Sort 
{
    public static int N = 20;
    public static int[] sequence = new int[N];
 
    public static void QuickSort(int left, int right) 
    {
        if (right - left <= 0)
            return;
        else 
        {
            Random rand = new Random();
            int pivotIndex = left + rand.nextInt(right - left + 1);
            swap(pivotIndex, right);
 
            int pivot = sequence[right];
            int partition = partitionIt(left, right, pivot);
            QuickSort(left, partition - 1);
            QuickSort(partition + 1, right);
        }
    }
 
    public static int partitionIt(int left, int right, long pivot) 
    {
        int count =0;
        int leftPtr = left - 1;
        int rightPtr = right;
        while (true) 
        {
            while (sequence[++leftPtr] < pivot);
            while (rightPtr > 0 && sequence[--rightPtr] > pivot);
                if (leftPtr >= rightPtr){
                    break;
                }
                else{
                    swap(leftPtr, rightPtr);
                    }
                }
                swap(leftPtr, right);

        return leftPtr;
    }
 
    public static void swap(int dex1, int dex2) 
    {
        int temp = sequence[dex1];
        sequence[dex1] = sequence[dex2];
        sequence[dex2] = temp;
    }
 
    static void printSequence(int[] sorted_sequence) 
    {
        for (int i = 0; i < sorted_sequence.length; i++)
            System.out.print(sorted_sequence[i] + " ");
    }
 
    public static void main(String args[]) 
    {
        System.out.println("Sorting of randomly generated numbers using RANDOMIZED QUICK SORT");
        Random random = new Random();
 
        for (int i = 0; i < N; i++)
            sequence[i] = Math.abs(random.nextInt(100));
 
        System.out.println("\nOriginal Sequence: ");
        printSequence(sequence);
        System.out.println("\nSorted Sequence: ");
        QuickSort(0, N - 1);
        printSequence(sequence);
    }
}

Reference:
https://www.geeksforgeeks.org/quick-sort/
https://www.sanfoundry.com/java-program-implement-quick-sort-randomization/
